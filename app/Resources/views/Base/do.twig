{% set dockerSyncRequired = (project.dockerSynchedServices|length > 0) %}

#!/bin/bash

INITIAL_DIR=$PWD
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DOCKER_COMPOSE_COMMAND="docker-compose"
DOCKER_SYNC_COMMAND="docker-sync"

cd "$DIR"

usage () {
    echo "Usage : $0 (build|start|shell|dc|stop|clean)"
}

terminate () {
    cd $INITIAL_DIR
}

{% if dockerSyncRequired %}
create_volumes () {
{% for service in project.services if service.isDockerSynched == true %}
    docker volume create --name=docker-arch-{{ service.identifier }}-sync
{% endfor %}
}
{% endif %}

build () {
{% if dockerSyncRequired %}
create_volumes
$DOCKER_SYNC_COMMAND start
{% endif %}
$DOCKER_COMPOSE_COMMAND up --build -d
terminate
}

start () {
{% if dockerSyncRequired %}
create_volumes
$DOCKER_SYNC_COMMAND start
{% endif %}
$DOCKER_COMPOSE_COMMAND up -d
terminate
}

compose () {
$DOCKER_COMPOSE_COMMAND ${@:2}
terminate
}

shell () {
DOCKER_CLI_CONTAINERS_IDENTIFIERS=({% for service in project.cliServices %}"{{ service.identifier }}"{% if not loop.last %} {% endif %}{% endfor %})
DOCKER_CLI_CONTAINERS_SHELLS=({% for service in project.cliServices %}"{{ service.options.zsh|default(false) ? 'zsh': 'bash' }}"{% if not loop.last %} {% endif %}{% endfor %})
INDEX=1
echo "Choose the container instance to access its bash/zsh shell:"
for DOCKER_CONTAINER_IDENTIFIER in "${DOCKER_CLI_CONTAINERS_IDENTIFIERS[@]}"
do
    CONTAINER_STATUS=$($DOCKER_COMPOSE_COMMAND ps | sed 1,2d | grep Up | grep $DOCKER_CONTAINER_IDENTIFIER | cut -d ' ' -f1)
    CONTAINER_STATUS_DISPLAY=$(if [ ${CONTAINER_STATUS} != "" ]; then echo "AVAILABLE"; else echo "NOT AVAILABLE"; fi)
    echo "    > $INDEX - $DOCKER_CONTAINER_IDENTIFIER [$DOCKER_CLI_CONTAINERS_SHELLS[$INDEX]] [$CONTAINER_STATUS_DISPLAY]"
    INDEX=$(($INDEX+1))
done
read -p "Choose the container instance (list above) to access its bash/zsh shell: " DOCKER_CONTAINER_INDEX

$DOCKER_COMPOSE_COMMAND exec ${DOCKER_CLI_CONTAINERS_IDENTIFIERS[$DOCKER_CONTAINER_INDEX - 1]} bash
terminate
}

stop () {
{% if dockerSyncRequired %}
    $DOCKER_SYNC_COMMAND stop
    $DOCKER_COMPOSE_COMMAND stop
{% endif %}
$DOCKER_COMPOSE_COMMAND stop
terminate
}

clean () {
$DOCKER_COMPOSE_COMMAND rm --stop --force
# docker stop $(docker ps -a -q)
# docker rm --force $(docker ps -a -q)
{% if dockerSyncRequired %}
    $DOCKER_SYNC_COMMAND clean
{% endif %}
docker volume prune
terminate
}

case "$1" in

build) build
    ;;
start) start
    ;;
dc) compose $*
    ;;
shell) shell $*
    ;;
stop) stop
    ;;
clean) clean
    ;;
*) usage
   ;;
esac
