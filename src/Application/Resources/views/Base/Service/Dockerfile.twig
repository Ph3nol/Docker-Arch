{% set dockerContainer = service.dockerContainer %}
# This Dockerfile has been generated by {{ constant('\\Ph3\\DockerArch\\Application\\Architect::PROJECT_NAME') }} open source project.

# -------------------------- !!! DO NOT UPDATE THIS FILE !!! --------------------------
# -------------------------- !!! DO NOT UPDATE THIS FILE !!! --------------------------
# -------------------------- !!! DO NOT UPDATE THIS FILE !!! --------------------------

# To make changes, update your project .{{ constant('\\Ph3\\DockerArch\\Application\\Architect::PROJECT_CONFIG_FILENAME') }} file,
# and generate your new Docker configuration.

#######################################################################################

# {{ service.identifier }} Dockerfile...

{% if dockerContainer.from %}
FROM {{ dockerContainer.from }}
{% endif %}
LABEL maintainer="{{ dockerContainer.maintainer|raw }}"
# MAINTAINER {{ dockerContainer.maintainer|raw }} # Deprecated
{# ----------------------------------------------------- Envs (ENV part) #}
{% if dockerContainer.envs|length %}

# Set some envs.
{% endif %}
{% for envKey, envValue in dockerContainer.envs %}
ENV {{ envKey }} {{ envValue }}
{% endfor %}
{# ----------------------------------------------------- To-copy entries (COPY part) #}
{% if dockerContainer.copyEntries|length %}

# Copy some entries.
{% endif %}
{% for copyEntry in dockerContainer.copyEntries %}
COPY {{ copyEntry.local }} {{ copyEntry.remote }}
{% endfor %}
{# ----------------------------------------------------- Packages (RUN apt-get part) #}
{% if dockerContainer.packages|length and
    dockerContainer.isPackageManager(
        constant('Ph3\\DockerArch\\Domain\\DockerContainer\\Model\\DockerContainerInterface::PACKAGE_MANAGER_TYPE_APT')
    ) %}

# Packages installation.
RUN set -xe && apt-get update
RUN apt-get install -y --no-install-recommends {{ dockerContainer.packages|join(" \\\n    ") }}
RUN apt-get autoclean -y && rm -rf /var/lib/apt/lists/*
{% endif %}
{% if dockerContainer.packages|length and
    dockerContainer.isPackageManager(
        constant('Ph3\\DockerArch\\Domain\\DockerContainer\\Model\\DockerContainerInterface::PACKAGE_MANAGER_TYPE_APK')
    ) %}
RUN set -xe && apk update
RUN apk add --update {{ dockerContainer.packages|join(" \\\n    ") }}
RUN rm -rf /var/cache/apk/*
{% endif %}
{# ----------------------------------------------------- Commands (RUN part) #}
{% if dockerContainer.commands|length %}

# Let's run some commands, in order to install, configure and customize the container.
{% endif %}
{% for command in dockerContainer.commands %}
RUN {{ command|raw }}
{% endfor %}
{# ----------------------------------------------------- Entry point (ENTRYPOINT) #}
{% if dockerContainer.entryPoint %}

# Entry point.
ENTRYPOINT ["{{ dockerContainer.entryPoint }}"]
{% endif %}
{# ----------------------------------------------------- CMD #}
{% if dockerContainer.cmd %}

# CMD
CMD {{ dockerContainer.cmd|raw }}
{% endif %}
{# ----------------------------------------------------- Done #}

# ... done for {{ service.identifier }}!
