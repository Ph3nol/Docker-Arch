{% set docker_syncRequired = (project.docker_synchedServices|length > 0) %}
#!/bin/bash

INITIAL_DIR=$PWD
DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
DOCKER_COMMAND="docker"
DOCKER_COMPOSE_COMMAND="docker-compose -p {{ project.identifier }}"
DOCKER_SYNC_COMMAND="docker-sync"

cd "$DIR"

terminate () {
    cd $INITIAL_DIR
    exit 0
}

if [ ! -f "$DIR/.env" ]; then
    echo "No .env file found into $DIR."
    echo "Create it from .env.dist one and try again."
    terminate
fi

usage () {
    echo "Usage : $0 (build|start|shell|dc|stop|clean)"
}

{% if docker_syncRequired %}
create_volumes () {
{% for service in project.services if service.isDockerSynched == true %}
    $DOCKER_COMMAND volume create --name={{ project.identifier }}-{{ service.identifier }}-sync
{% endfor %}
}
{% endif %}

build () {
{% if docker_syncRequired %}
create_volumes
$DOCKER_SYNC_COMMAND start
{% endif %}
$DOCKER_COMPOSE_COMMAND up --build -d
terminate
}

start () {
{% if docker_syncRequired %}
create_volumes
$DOCKER_SYNC_COMMAND start
{% endif %}
$DOCKER_COMPOSE_COMMAND up -d
terminate
}

compose () {
$DOCKER_COMPOSE_COMMAND ${@:2}
terminate
}

shell () {
DOCKER_CLI_CONTAINERS_IDENTIFIERS=({% for service in project.cliServices %}"{{ service.identifier }}"{% if not loop.last %} {% endif %}{% endfor %})
DOCKER_CLI_CONTAINERS_SHELLS=({% for service in project.cliServices %}"{{ service.options.zsh|default(false) ? 'zsh': 'bash' }}"{% if not loop.last %} {% endif %}{% endfor %})
INDEX=1
echo "Choose the container instance to access its bash/zsh shell:"
for DOCKER_CONTAINER_IDENTIFIER in "${DOCKER_CLI_CONTAINERS_IDENTIFIERS[@]}"
do
    CONTAINER_STATUS=$($DOCKER_COMPOSE_COMMAND ps | sed 1,2d | grep Up | grep $DOCKER_CONTAINER_IDENTIFIER | cut -d ' ' -f1)
    CONTAINER_STATUS_DISPLAY=$(if [ "$CONTAINER_STATUS" == "" ]; then echo "NOT AVAILABLE"; else echo "AVAILABLE"; fi)
    SHELL_TYPE=${DOCKER_CLI_CONTAINERS_SHELLS[$INDEX - 1]}
    echo "    > $INDEX - $DOCKER_CONTAINER_IDENTIFIER [$SHELL_TYPE] [$CONTAINER_STATUS_DISPLAY]"
    INDEX=$(($INDEX+1))
done
read -p "Choose the container instance (list above) to access its bash/zsh shell: " DOCKER_CONTAINER_INDEX

$DOCKER_COMPOSE_COMMAND exec ${DOCKER_CLI_CONTAINERS_IDENTIFIERS[$DOCKER_CONTAINER_INDEX - 1]} ${DOCKER_CLI_CONTAINERS_SHELLS[$DOCKER_CONTAINER_INDEX - 1]}
terminate
}

stop () {
{% if docker_syncRequired %}
    $DOCKER_SYNC_COMMAND stop
    $DOCKER_COMPOSE_COMMAND stop
{% endif %}
$DOCKER_COMPOSE_COMMAND stop
terminate
}

clean () {
$DOCKER_COMPOSE_COMMAND rm --stop --force
# $DOCKER_COMMAND stop $($DOCKER_COMMAND ps -a -q)
# $DOCKER_COMMAND rm --force $($DOCKER_COMMAND ps -a -q)
{% if docker_syncRequired %}
    $DOCKER_SYNC_COMMAND clean
{% endif %}
$DOCKER_COMMAND volume prune
terminate
}

case "$1" in

build) build
    ;;
start) start
    ;;
dc) compose $*
    ;;
shell) shell $*
    ;;
stop) stop
    ;;
clean) clean
    ;;
*) usage
   ;;
esac
